    # Инициализация
# необходимо всегда делать описание функций
def add(x,y):
    '''
    :param x:____    параметр х и его описание
    :param y:____    параметр у и его описание
    :return: ____
    '''
    return x+y
# чтобы посмотреть описание функции, необходимо вызвать метод help:
help(add)

# вызовем данную функцию:
print(add(100,101))             # можно работать с числами, со строками, с любыми элементами
print(add('Sergey', '+Kate'))

# Функция возвращает функцию
def f1(n):
    def f2(m):
        return n+m
    return f2
new_f = f1(100)
print(type(new_f))
new_f = f1(100)
print(new_f(250))

#Даже без return функция вернет None
def f():
    pass    # pass - заглушка. Значит ничего не делать. При вызове функции программа вернет None.

print(f())

    # Аргументы функции (которые могут подаваться на вход функции)
# определим простейшую функцию (как в начале), но добавим необязательный параметр:
def add(x,y,z = 10):
    '''
    :param x:____    параметр х и его описание
    :param y:____    параметр у и его описание
    :return: ____
    '''
    return x+y+z
print(add(1,2))     # необязательный параметр можно не вызывать. Результат выполнения функции будет 13.
# необязательный параметр может быть только не первыми 2 элементами!
# если при вызове функции указать третий параметр, то результат изменится. (z=10 забудется)
# короче, по умолчанию 10. Если хотим менять, то меняем (тогда будет другой).
print(add(1,2,3))

# можно передавать функции любое количество параметров. Это делается с помощью массива *args
def func(*args):
    print(type(args),args)
    return args
func(1,2,3,'Volvo')     # т.е. мы передали параметры 1,2,3,'Volvo' в функцию func, их на себя принял args.
                        # таким образом мы передали параметры с помощью кортежа (<class 'tuple'> (1, 2, 3, 'Volvo'))

# можно передавать параметры с помощью словаря. Это делается с помощью **kwargs
def func(**kwargs):
    print(type(kwargs),kwargs)
    return kwargs
func(a = 1, b = 2, c = 'Volvo', d = 1.5)    # передали параметры с помощью словаря (<class 'dict'> {'a': 1, 'b': 2, 'c': 'Volvo', 'd': 1.5})

# можно создавать сложные на вход структуры параметров
def func_difficult(x,y = 2, *args, **kwargs):   # обязательные переменные, необязательные, потом args, и в конце kwargs
    print(type(kwargs),kwargs)
    return kwargs
# вызовем функцию func_difficult. Она вызывается только с одним параметром (х), т.к. только он один является обязательным
func_difficult(1)

# сделаем более сложный вызов
def func_difficult(x,y = 2, *args, **kwargs):   # обязательные переменные, необязательные, потом args, и в конце kwargs
    print(type(x),x)
    print(type(y),y)
    print(type(args),args)
    print(type(kwargs),kwargs)
    return kwargs
func_difficult(1,3,(1,2,3), temp = 12, temp_1 = 13)     # задаем параметры функции (обязат, необяз, кортеж,словарь)







